<?php

/**
 * @file
 * Install, update and uninstall functions for the termstatus module.
 */

/**
 * Implemets hook_enable().
 *
 * Disable term status per default in order to protect people from having all
 * their terms disappear when enabling the module. Do not disable the module
 * when installing into a pristine system - i.e. when there are no terms.
 */
function termstatus_enable() {
  $any_tid = db_query('SELECT tid FROM {taxonomy_term_data} LIMIT 1')->fetchField();
  config_set('termstatus.settings', 'termstatus_enable', empty($any_tid));
}

/**
 * Implements hook_requirements().
 */
function termstatus_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time.
  $t = get_t();

  if ($phase != 'install') {
    // Check if term status is enabled.
    if (!config_get('termstatus.settings', 'termstatus_enable')) {
      $requirements['taxonomy_term_status'] = array(
        'title' => $t('Taxonomy Term Status'),
        'value' => $t('Term status is not configured yet. First visit the <a href="@config_link">configuration page</a> in order to build the status records and then enable it.', array('@config_link' => url('admin/config/system/termstatus'))),
        'severity' => REQUIREMENT_WARNING,
      );
    }
    else {
      $requirements['taxonomy_term_status'] = array(
        'title' => $t('Taxonomy Term Status'),
        'value' => $t('Term status is configured and active. If the site is experiencing problems with visibility of taxonomy terms, you may have to rebuild the term status records using the <a href="@config_link">configuration page</a>.', array('@config_link' => url('admin/config/system/termstatus'))),
        'severity' => REQUIREMENT_OK,
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function termstatus_schema() {
  $schema['termstatus'] = array(
    'description' => 'The base table for termstatus.',
    'fields' => array(
      'tid' => array(
        'description' => 'Primary Key: The {taxonomy_term_data}.tid of the term.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the term is published (visible to non-administrators).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('tid'),
    'term_status' => array('tid', 'status'),
    'foreign keys' => array(
      'taxonomy_term_data' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('tid' => 'tid'),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function termstatus_update_last_removed() {
  return 7000;
}

 /**
 * Move termstatus settings from variables to config.
 */
function termstatus_update_1000() {
  // Migrate variables to config.
  $config = config('termstatus.settings');
  $config->set('termstatus_enable', update_variable_get('termstatus_enable'));
  $all_vocabularies = taxonomy_get_vocabularies();
  $defaults = [];
  foreach ($all_vocabularies as $vocabulary) {
    $defaults[$vocabulary->machine_name] = update_variable_get('termstatus_default_' . $vocabulary->machine_name, TRUE);
  }
  $config->set('termstatus_default', $defaults);
  $config->save();

  // Delete variables.
  update_variable_del('termstatus_enable');
  foreach ($all_vocabularies as $vocabulary) {
    update_variable_del('termstatus_default_' . $vocabulary->machine_name);
  }
}
